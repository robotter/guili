<svg
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  id="drawing"
  viewBox="-150 -150 300 300">

  <defs id="defs">
    <style type="text/css"><![CDATA[
      .slot {
        stroke: black;
        stroke-width: 4;
      }
      .guide {
        stroke: black;
        stroke-width: 2;
      }
      #guide-0 {
        stroke: red;
        stroke-width: 4;
      }

      #perimeter, #balleater, #turbine {
        stroke: black;
        stroke-width: 2;
        fill: none;
      }

      .empty { fill: none; }

    ]]></style>
  </defs>

  <!--

  from math import *

  #cylinder_outer_r = 100.
  cylinder_r = 70.
  cylinder_a0 = radians(150)
  cylinder_arc = radians(290)
  slot_r = 45./2
  slots_n = 8
  guide_r = cylinder_r / 2
  balleater_size = (70, 35)
  turbine_r = 40

  robot_inner_r = cylinder_r + slot_r + 5
  robot_side = 2 * sqrt(3) * robot_inner_r
  robot_cut = 70

  slots_circles = []
  slots_guides = []
  for k in range(slots_n):
      a = cylinder_a0 + k * cylinder_arc / (slots_n - 1)
      slots_circles.append('<circle id="slot-%d" class="slot empty" r="%d" cx="%f" cy="%f" />' % (
          k, slot_r, cylinder_r*cos(a), cylinder_r*sin(a)
      ))
      slots_guides.append('<line id="guide-%d" class="guide" x1="0" y1="0" x2="%f" y2="%f" />' % (
          k, guide_r*cos(a), guide_r*sin(a)
      ))

  perimeter_points = [
      #  /\
      (-robot_cut * sin(pi/6), robot_inner_r * 2 - robot_cut * cos(pi/6)),
      ( robot_cut * sin(pi/6), robot_inner_r * 2 - robot_cut * cos(pi/6)),
      # _\
      (robot_side/2 - robot_cut * sin(pi/6), -robot_inner_r + robot_cut * cos(pi/6)),
      (robot_side/2 - robot_cut, -robot_inner_r),
      # /_
      (-robot_side/2 + robot_cut, -robot_inner_r),
      (-robot_side/2 + robot_cut * sin(pi/6), -robot_inner_r + robot_cut * cos(pi/6)),
  ]

  balleater_transform = 'translate(%f,%f) rotate(60)' % (
      robot_inner_r * cos(pi*5/6),
      robot_inner_r * sin(pi*5/6),
  )
  balleater_shape = '<path d="M%f,%f %f,%f, %f,%f %f,%f" />' % (
      -balleater_size[0]/2, 0,
      -balleater_size[0]/2, balleater_size[1],
      balleater_size[0]/2, balleater_size[1],
      balleater_size[0]/2, 0,
  )

  turbine_transform = 'translate(%f,%f) rotate(-60)' % (
      robot_inner_r * cos(pi/6),
      robot_inner_r * sin(pi/6),
  )
  turbine_shape = '<path d="M%f,0 a1,1 0 0,0 %f,0" />' % (
      -turbine_r, 2*turbine_r
  )


  template = """\
    <g transform="scale(1,-1)">

      <g id="cylinder">
        %(slots_circles)s
        %(slots_guides)s
      </g>

      <g id="perimeter">
        <polygon points="%(perimeter_points)s" />
      </g>

      <g id="balleater" transform="%(balleater_transform)s">
        %(balleater_shape)s
      </g>

      <g id="turbine" transform="%(turbine_transform)s">
        %(turbine_shape)s
      </g>

    </g>
  """

  -->

  print(template % dict(
      slots_circles = '\n      '.join(slots_circles),
      slots_guides = '\n      '.join(slots_guides),
      perimeter_points = ' '.join("%f,%f" % p for p in perimeter_points),
      balleater_transform = balleater_transform,
      balleater_shape = balleater_shape,
      turbine_transform = turbine_transform,
      turbine_shape = turbine_shape,
  ))


  <g transform="scale(1,-1)">

    <g id="cylinder">
      <circle id="slot-0" class="slot empty" r="22" cx="-60.621778" cy="35.000000" />
      <circle id="slot-1" class="slot empty" r="22" cx="-68.612074" cy="-13.870230" />
      <circle id="slot-2" class="slot empty" r="22" cx="-42.266309" cy="-55.799276" />
      <circle id="slot-3" class="slot empty" r="22" cx="5.231107" cy="-69.804266" />
      <circle id="slot-4" class="slot empty" r="22" cx="50.110679" cy="-48.876577" />
      <circle id="slot-5" class="slot empty" r="22" cx="69.912984" cy="-3.489212" />
      <circle id="slot-6" class="slot empty" r="22" cx="54.728204" cy="43.644286" />
      <circle id="slot-7" class="slot empty" r="22" cx="12.155372" cy="68.936543" />
      <line id="guide-0" class="guide" x1="0" y1="0" x2="-30.310889" y2="17.500000" />
      <line id="guide-1" class="guide" x1="0" y1="0" x2="-34.306037" y2="-6.935115" />
      <line id="guide-2" class="guide" x1="0" y1="0" x2="-21.133154" y2="-27.899638" />
      <line id="guide-3" class="guide" x1="0" y1="0" x2="2.615553" y2="-34.902133" />
      <line id="guide-4" class="guide" x1="0" y1="0" x2="25.055340" y2="-24.438289" />
      <line id="guide-5" class="guide" x1="0" y1="0" x2="34.956492" y2="-1.744606" />
      <line id="guide-6" class="guide" x1="0" y1="0" x2="27.364102" y2="21.822143" />
      <line id="guide-7" class="guide" x1="0" y1="0" x2="6.077686" y2="34.468271" />
    </g>

    <g id="perimeter">
      <polygon points="-35.000000,134.378222 35.000000,134.378222 133.874954,-36.878222 98.874954,-97.500000 -98.874954,-97.500000 -133.874954,-36.878222" />
    </g>

    <g id="balleater" transform="translate(-84.437477,48.750000) rotate(60)">
      <path d="M-35.000000,0.000000 -35.000000,35.000000, 35.000000,35.000000 35.000000,0.000000" />
    </g>

    <g id="turbine" transform="translate(84.437477,48.750000) rotate(-60)">
      <path d="M-40.000000,0 a1,1 0 0,0 80.000000,0" />
    </g>

  </g>

  <script type="text/javascript"><![CDATA[
    const xlinkNS = "http://www.w3.org/1999/xlink";

    var drawing = document.getElementById("drawing");

    // Various helper methods

    drawing.createElement = function(tag) {
      return document.createElementNS(this.namespaceURI, tag);
    };

    Element.prototype.setAttributes = function(attrs) {
      for(var k in attrs) {
        if(k == "xlink:href") {
          this.setAttributeNS(xlinkNS, k, attrs[k]);
        } else {
          this.setAttribute(k, attrs[k]);
        }
      }
    }

  ]]></script>

</svg>
