<svg
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  id="drawing"
  viewBox="-150 -163.63 300 300">

  <defs id="defs">
    <style type="text/css"><![CDATA[
      .slot {
        stroke: black;
        stroke-width: 4;
      }
      .guide {
        stroke: black;
        stroke-width: 2;
      }
      #guide-0 {
        stroke: red;
        stroke-width: 4;
      }

      #perimeter, #balleater, #turbine {
        stroke: black;
        stroke-width: 2;
        fill: none;
      }

      .color-none { fill: none; }
      .color-orange { fill: #d05d28; }
      .color-green { fill: #61993b; }

      #state, #emptying_move {
        stroke: black;
        stroke-width: 2;
      }

      #state.busy { fill: red; }
      #state.ready { fill: green; }
      #state.ground_clear { fill: orange; }

      #emptying_move.none { fill: white; }
      #emptying_move.watertower { fill: aquamarine; }
      #emptying_move.treatment { fill: peru; }

    ]]></style>
  </defs>



  <!--
    from math import *
    import textwrap

    #cylinder_outer_r = 100.
    cylinder_r = 70.
    cylinder_a0 = radians(150)
    cylinder_arc = radians(290)
    slot_r = 45./2
    slots_n = 8
    guide_r = cylinder_r / 2
    balleater_size = (70, 35)
    turbine_r = 40

    robot_small_side = 85
    robot_large_side = 250
    robot_side = robot_large_side + robot_small_side  # triangle size
    robot_h = robot_side * sin(pi/3)
    robot_inner_r = cylinder_r + slot_r + 5

    slots_circles = []
    slots_guides = []
    for k in range(slots_n):
        a = cylinder_a0 - k * cylinder_arc / (slots_n - 1)
        slots_circles.append('<circle id="slot-%d" class="slot color-none" r="%d" cx="%f" cy="%f" />' % (
            k, slot_r, cylinder_r*cos(a), cylinder_r*sin(a)
        ))
        slots_guides.append('<line id="guide-%d" class="guide" x1="0" y1="0" x2="%f" y2="%f" />' % (
            k, guide_r*cos(a), guide_r*sin(a)
        ))

    perimeter_points = [
        #  /\
        (-robot_small_side/2 * sin(pi/6), robot_h*2/3 - robot_small_side/2 * cos(pi/6)),
        ( robot_small_side/2 * sin(pi/6), robot_h*2/3 - robot_small_side/2 * cos(pi/6)),
        # _\
        (robot_side/2 - robot_small_side/2 * sin(pi/6), -robot_h/3 + robot_small_side/2 * cos(pi/6)),
        (robot_side/2 - robot_small_side/2, -robot_h/3),
        # /_
        (-robot_side/2 + robot_small_side/2, -robot_h/3),
        (-robot_side/2 + robot_small_side/2 * sin(pi/6), -robot_h/3 + robot_small_side/2 * cos(pi/6)),
    ]

    balleater_transform = 'translate(%f,%f) rotate(60)' % (
        robot_h/3 * cos(pi*5/6),
        robot_h/3 * sin(pi*5/6),
    )
    balleater_shape = '<path d="M%f,%f %f,%f, %f,%f %f,%f" />' % (
        -balleater_size[0]/2, 0,
        -balleater_size[0]/2, balleater_size[1],
        balleater_size[0]/2, balleater_size[1],
        balleater_size[0]/2, 0,
    )

    turbine_transform = 'translate(%f,%f) rotate(-60)' % (
        robot_h/3 * cos(pi/6),
        robot_h/3 * sin(pi/6),
    )
    turbine_shape = '<path d="M%f,0 a1,1 0 0,0 %f,0" />' % (
        -turbine_r, 2*turbine_r
    )


    template = """\

      \x3c\x21\x2d\x2d
    %(source)s
      \x2d\x2d\x3e

      <g transform="scale(1,-1)">

        <g id="cylinder">
          %(slots_circles)s
          %(slots_guides)s
        </g>

        <g id="perimeter">
          <polygon points="%(perimeter_points)s" />
        </g>

        <g id="balleater" transform="%(balleater_transform)s">
          %(balleater_shape)s
        </g>

        <g id="turbine" transform="%(turbine_transform)s">
          %(turbine_shape)s
        </g>

      </g>
    """

    print(template % dict(
        source = textwrap.indent(open(__file__).read(), '    '),
        slots_circles = '\n      '.join(slots_circles),
        slots_guides = '\n      '.join(slots_guides),
        perimeter_points = ' '.join("%f,%f" % p for p in perimeter_points),
        balleater_transform = balleater_transform,
        balleater_shape = balleater_shape,
        turbine_transform = turbine_transform,
        turbine_shape = turbine_shape,
    ))


  -->

  <g transform="scale(1,-1)">

    <g id="cylinder">
      <circle id="slot-0" class="slot color-none" r="22" cx="-60.621778" cy="35.000000" />
      <circle id="slot-1" class="slot color-none" r="22" cx="-22.294066" cy="66.354914" />
      <circle id="slot-2" class="slot color-none" r="22" cx="27.190436" cy="64.503335" />
      <circle id="slot-3" class="slot color-none" r="22" cx="63.067821" cy="30.371862" />
      <circle id="slot-4" class="slot color-none" r="22" cx="67.383697" cy="-18.958833" />
      <circle id="slot-5" class="slot color-none" r="22" cx="37.978238" cy="-58.801815" />
      <circle id="slot-6" class="slot color-none" r="22" cx="-10.432959" cy="-69.218158" />
      <circle id="slot-7" class="slot color-none" r="22" cx="-53.623111" cy="-44.995133" />
      <line id="guide-0" class="guide" x1="0" y1="0" x2="-30.310889" y2="17.500000" />
      <line id="guide-1" class="guide" x1="0" y1="0" x2="-11.147033" y2="33.177457" />
      <line id="guide-2" class="guide" x1="0" y1="0" x2="13.595218" y2="32.251667" />
      <line id="guide-3" class="guide" x1="0" y1="0" x2="31.533910" y2="15.185931" />
      <line id="guide-4" class="guide" x1="0" y1="0" x2="33.691849" y2="-9.479416" />
      <line id="guide-5" class="guide" x1="0" y1="0" x2="18.989119" y2="-29.400907" />
      <line id="guide-6" class="guide" x1="0" y1="0" x2="-5.216479" y2="-34.609079" />
      <line id="guide-7" class="guide" x1="0" y1="0" x2="-26.811556" y2="-22.497566" />

    </g>

    <g id="perimeter">
      <polygon points="-21.250000,156.606261 21.250000,156.606261 146.250000,-59.900090 125.000000,-96.706170 -125.000000,-96.706170 -146.250000,-59.900090" />
    </g>

    <g id="balleater" transform="translate(-83.750000,48.353085) rotate(60)">
      <path d="M-35.000000,0.000000 -35.000000,35.000000, 35.000000,35.000000 35.000000,0.000000" />
    </g>

    <g id="turbine" transform="translate(83.750000,48.353085) rotate(-60)">
      <path d="M-40.000000,0 a1,1 0 0,0 80.000000,0" />
    </g>

  </g>

  <animateTransform
    xlink:href="#cylinder"
    attributeName="transform"
    attributeType="XML"
    id="rotate-cylinder"
    type="rotate"
    begin="beginEvent"
    fill="freeze" />

  <circle id="state" class="none" cx="-120" cy="-130" r="20" />
  <circle id="emptying_move" class="none" cx="120" cy="-130" r="20" />

  <script type="text/javascript"><![CDATA[
    const xlinkNS = "http://www.w3.org/1999/xlink";

    var drawing = document.getElementById("drawing");

    // Various helper methods

    drawing.createElement = function(tag) {
      return document.createElementNS(this.namespaceURI, tag);
    };

    Element.prototype.setAttributes = function(attrs) {
      for(var k in attrs) {
        if(k == "xlink:href") {
          this.setAttributeNS(xlinkNS, k, attrs[k]);
        } else {
          this.setAttribute(k, attrs[k]);
        }
      }
    }

  ]]></script>

</svg>
